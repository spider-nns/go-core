package main

func main() {

	clo := fa(1)
	println(clo(1))
	println(clo(1))
	clo1 := fa(1)
	println(clo1(1))
}

func fa(a int) func(i int) int {
	return func(i int) int {
		println(&a, a)
		a += 1
		return a
	}
}

//闭包是函数和引用环境组合，一般通过在匿名函数中引用外部函数的局部变量或包含变量构成
//闭包 = 函数 + 引用函数
//闭包对环境引入是直接引入，编译器检测到闭包，会将闭包引用的[外部变量]分配到堆上

//如果函数返回的闭包引用了该函数的局部变量(参数或者函数内部变量)
//多次调用该函数，返回的多个闭包所引用的外部变量是多个副本，每次调用都会为局部变量分配内存
//用一个闭包函数多次,如果该闭包修改了引用的外部变量，每一次调用该闭包对该外部变量都有影响，因为闭包函数共享外部引用

//同一个函数返回的多个闭包共享该函数的局部变量
//闭包减少全局变量，是附有数据的行为
