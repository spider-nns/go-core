package main

type Printer interface {
	Print()
}
type S struct{}

func (s S) Print() {
	println("print")
}

func main() {
	var i Printer
	//没有初始化的接口调用其方法会产生panic
	//i.Print()
	//必须初始化
	i = S{}
	i.Print()

}

//接口方法调用的最终地址是在运行期决定的，将具体类型变量赋值给接口后，会使用具体类型的方法指针初始化接口变量
//当调用接口变量的方法时，实际上是间接的调用实例的方法
//接口方法调用不是一种直接的调用，有一定的运行时开销

//接口的动态类型和静态类型
//1.动态类型
//接口绑定的具体实例的类型称为接口的动态类型
//2.静态类型
//接口被定义时，类型就已经被确定，这个类型叫做接口的静态类型
//静态类型的本质特征就是接口的方法签名集合

//两个接口如果方法签名集合相同(方法的顺序可以不同)，这两个接口在语义上完全等价，他们之间不需要强制类型转换就可以相互赋值
//go编译器校验接口是否能赋值是比较二者的方法集，而不是看具体接口类型名
//a接口的方法集A,b接口的方法集B
//如果B是A的子集，a接口变量可以直接赋值给b的接口变量，反之需要接口类型断言
